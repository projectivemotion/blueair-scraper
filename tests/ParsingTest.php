<?php
/**
 * Project: BlueairScraper
 *
 * @author Amado Martinez <amado@projectivemotion.com>
 */

namespace projectivemotion\BlueairScraper\tests;


use projectivemotion\BlueairScraper\Scraper;

class ParsingTest extends \PHPUnit_Framework_TestCase
{
    public static function readFile($file)
    {
        return file_get_contents(__DIR__ . '/' . $file);
    }

    public function testGetFormInputs()
    {
        $Scraper = new Scraper();
        $formreq =   $Scraper->getFormInputs(self::readFile('home.html'));
        $inputs = $formreq->post;

        $this->assertArrayHasKey('__VIEWSTATEGENERATOR', $inputs);
        $this->assertArrayHasKey('__EVENTVALIDATION', $inputs);
        $this->assertArrayHasKey('__VIEWSTATE', $inputs);
        $this->assertArrayHasKey('__EVENTARGUMENT', $inputs);
        $this->assertArrayHasKey('__EVENTTARGET', $inputs);

        $this->assertEquals("",
            $inputs['__VIEWSTATE']);

    }
}
